#BlueJ class context
comment0.target=Enemy
comment0.text=\r\n\ The\ Enemy\ class\ is\ the\ superclass\ of\ all\ enemys.\ \r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=maxHealth\ enemyType\ detectPlayerRange\ minDistance\ attackRange\ bowRange\ bowSpeed\ damage\ hitCooldown\ removeCooldown\ bar\ player
comment1.target=void\ setup(int,\ java.lang.String,\ int,\ int,\ int,\ int,\ int,\ int,\ double,\ double,\ EnemyHealthBar,\ Player)
comment1.text=\r\n\ Method\ 'setup'\:\ Is\ called\ by\ the\ constructor\ in\ every\ Enemy\ subclass.\r\n\ It\ sets\ the\ variables\ in\ this\ superclass\ to\ the\ values\ in\ the\ Enemy\ subclass.\r\n\ \r\n\ @param\ 'maxHealth'\:\ Max\ health\ of\ the\ enemy\r\n\ @param\ 'enemyType'\:\ "melee"\ (if\ the\ enemy\ has\ a\ sword\ or\ dagger,...)\ or\ "ranged"\ (if\ the\ enemy\ has\ a\ bow)\ \r\n\ @param\ 'detectPlayerRange'\:\ Player\ detection\ range\ of\ the\ enemy\ (in\ pixel)\ \r\n\ @param\ 'minDistance'\:\ Minimum\ distance\ between\ the\ enemy\ and\ the\ player\r\n\ @param\ 'attackRange'\:\ Attack\ range\ of\ the\ enemy\r\n\ @param\ 'bowRange'\:\ The\ range\ of\ the\ bow\ if\ the\ enemy\ has\ a\ bow\r\n\ @param\ 'bowSpeed'\:\ The\ speed\ of\ the\ bow\ if\ the\ enemy\ has\ a\ bow\r\n\ @param\ 'damage'\:\ Attack\ damage\ of\ the\ enemy\r\n\ @param\ 'hitCooldown'\:\ Cooldown\ between\ hits\r\n\ @param\ 'removeCooldown'\:\ Enemy\ will\ be\ removed\ after\ Cooldown\ (after\ Health\ <\=\ 0)\r\n\ @param\ 'bar'\:\ Reference\ to\ the\ HealthBar\ of\ the\ enemy\r\n\ @param\ 'player'\:\ Reference\ to\ the\ player\r\n
comment10.params=dropItems\ dropAmount\ probability
comment10.target=void\ checkRemove(java.lang.String[],\ int[],\ int[])
comment10.text=\r\n\ Method\ 'checkRemove'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ If\ the\ enemy\ is\ dead\ and\ the\ remove\ cooldown\ has\ expired,\ the\ enemy\ and\ his\ collider\ will\ be\ removed\ from\ the\ world.\r\n\ The\ enemy\ will\ drop\ an\ item\ randomly\ according\ to\ given\ rules.\r\n\ \r\n\ @param\ 'dropItems'\:\ Array\ that\ contins\ the\ items\ that\ will\ be\ dropped\ if\ this\ enemy\ dies\r\n\ @param\ 'dropAmount'\:\ Array\ that\ contins\ the\ amount\ of\ items\ that\ will\ be\ dropped\ if\ this\ enemy\ dies\r\n\ @param\ 'probability'\:\ Array\ that\ contins\ the\ probability\ of\ dropping\ that\ item\r\n
comment11.params=damage
comment11.target=void\ gotHit(int)
comment11.text=\r\n\ Method\ 'gotHit'\:\ Is\ called\ by\ the\ 'useItem'\ method\ in\ Player\ class\ or\ the\ 'checkHit'\ method\ in\ Arrow\ class,\ \r\n\ if\ the\ player\ hit\ the\ enemy\ or\ an\ arrow\ hit\ the\ enemy.\r\n\ It\ subtracts\ the\ damage\ from\ the\ health\ and\ updates\ the\ health\ bar.\r\n\ If\ the\ health\ is\ <\=\ 0\ the\ enemy\ is\ dead\ and\ the\ die\ animation\ will\ be\ played.\r\n\ \r\n\ @param\ 'damage'\:\ The\ damage\ that\ the\ player\ /\ arrow\ deals\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ Method\ 'act'\:\ Is\ called\ every\ tick\ or\ whenever\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\r\n\ It\ calls\ the\ 'act'\ method\ of\ the\ AnimatedCharacter\ superclass\ to\ perform\ animations\ and\ movement.\r\n
comment3.params=
comment3.target=void\ updateHealthBar()
comment3.text=\r\n\ Method\ 'updateHealthBar'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ It\ shows\ the\ health\ bar\ if\ the\ player\ is\ in\ the\ detectPlayerRange\ and\ hides\ it\ if\ the\ player\ is\ too\ far\ away.\r\n
comment4.params=
comment4.target=void\ updatePlayerPosition()
comment4.text=\r\n\ Method\ 'updatePlayerPosition'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ It\ stores\ the\ current\ position\ of\ the\ player,\ so\ that\ information\ can\ be\ used\ in\ the\ 'moveToPlayer'\ method,\ if\ the\ player\ is\ in\ range.\r\n
comment5.params=
comment5.target=void\ moveToPlayer()
comment5.text=\r\n\ Method\ 'moveToPlayer'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ It\ moves\ the\ enemy\ to\ the\ player\ if\ the\ player\ is\ in\ range\ and\ the\ enemy\ is\ not\ closer\ to\ the\ player\ than\ attackRange.\r\n\ The\ enemy\ will\ move\ in\ x\ direction\ first\ if\ path\ is\ set\ to\ "priorityX"\ and\ in\ y\ direction\ if\ path\ is\ set\ to\ "priorityY".\r\n\ The\ path\ variable\ will\ be\ changed\ if\ the\ enemy\ collides\ with\ something\ in\ the\ 'checkCollision'\ method.\r\n
comment6.params=
comment6.target=void\ turnToPlayer()
comment6.text=\r\n\ Method\ 'turnToPlayer'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ The\ enemy\ will\ turn\ to\ the\ player\ if\ the\ player\ is\ in\ range\ and\ the\ enemy\ is\ a\ ranged\ type.\r\n
comment7.params=
comment7.target=void\ hit()
comment7.text=\r\n\ Method\ 'hit'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ The\ enemy\ will\ attack\ the\ player\ if\ both\ are\ alive,\ the\ player\ is\ in\ attack\ range\ and\ enough\ time\ passed\ since\ the\ last\ hit.\r\n
comment8.params=
comment8.target=void\ checkCollision()
comment8.text=\r\n\ Method\ 'checkCollision'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ If\ the\ collder\ of\ the\ enemy\ intersects\ another\ collider\ or\ an\ object,\ teleports\ the\ enemy\ back\ to\ his\ position\ of\ the\ last\ tick.\r\n\ It\ toogles\ the\ path,\ so\ the\ enemy\ will\ try\ to\ walk\ in\ another\ direction\ to\ walk\ closer\ to\ the\ player\ if\ he\ is\ in\ range.\r\n
comment9.params=
comment9.target=void\ storePosition()
comment9.text=\r\n\ Method\ 'storePosition'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method\ in\ every\ Enemy\ subclass.\r\n\ It\ stores\ the\ current\ position\ of\ the\ enemy,\ so\ that\ information\ can\ be\ used\ next\ tick\ in\ the\ 'checkCollision'\ method,\ if\ the\ enemy\ collides\ with\ something.\r\n
numComments=12
