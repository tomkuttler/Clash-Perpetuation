#BlueJ class context
comment0.target=Player
comment0.text=\r\n\ The\ Player\ class\ is\ the\ main\ character\ the\ golden\ knight.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=newBar\ newHitBar\ newInventory\ newHotbar
comment1.target=Player(PlayerHealthBar,\ HitCooldownBar,\ Inventory,\ Hotbar)
comment1.text=\r\n\ Player\ Constructor\:\ Sets\ the\ speed,\ creates\ the\ spriteSheet\ of\ the\ character,\ creates\ the\ animations\ and\ sets\ variables.\r\n\ \r\n\ @param\ 'newBar'\:\ Reference\ to\ the\ health\ bar\ manager\r\n\ @param\ 'newHitBar'\:\ Reference\ to\ the\ hit\ cooldown\ bar\ manager\r\n\ @param\ 'newInventory'\:\ Reference\ to\ the\ inventory\ manager\r\n\ @param\ 'newHotbar'\:\ Reference\ to\ the\ hotbar\ manager\r\n
comment10.params=
comment10.target=void\ checkChangeMap()
comment10.text=\r\n\ Method\ 'checkChangeMap'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ If\ the\ player\ walked\ to\ a\ specific\ place,\ change\ the\ map.\r\n
comment11.params=
comment11.target=void\ checkRemove()
comment11.text=\r\n\ Method\ 'checkRemove'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ If\ the\ player\ is\ dead\ and\ the\ remove\ cooldown\ has\ expired,\ the\ player\ and\ his\ collider\ will\ be\ removed\ from\ the\ world.\r\n
comment12.params=damage
comment12.target=void\ gotHit(int)
comment12.text=\r\n\ Method\ 'gotHit'\:\ Is\ called\ by\ the\ 'hit'\ method\ in\ Enemy\ class\ or\ the\ 'checkHit'\ method\ in\ Arrow\ class,\ \r\n\ if\ the\ enemy\ hit\ the\ player\ or\ an\ arrow\ hit\ the\ player.\r\n\ It\ subtracts\ the\ damage\ from\ the\ health\ and\ updates\ the\ health\ bar.\r\n\ If\ the\ health\ is\ <\=\ 0\ the\ player\ is\ dead\ the\ inventory\ wil\ be\ closed\ and\ the\ die\ animation\ will\ be\ played.\r\n\ \r\n\ @param\ 'damage'\:\ The\ damage\ that\ the\ enemy\ deals\r\n
comment13.params=
comment13.target=boolean\ isAlive()
comment13.text=\r\n\ Method\ 'isAlive'\:\ Is\ called\ by\ the\ 'hit'\ method\ in\ Enemy\ class,\ if\ the\ enemy\ wants\ to\ know\ if\ the\ player\ is\ alive.\r\n\ \r\n\ @return\:\ True\ if\ player\ is\ alive,\ false\ if\ dead\r\n
comment14.params=healthPointsToAdd
comment14.target=void\ heal(int)
comment14.text=\r\n\ Method\ 'heal'\:\ Is\ called\ by\ the\ 'useItem'\ method,\ if\ the\ player\ used\ a\ healing\ item.\r\n\ It\ adds\ the\ health\ points\ that\ the\ item\ heals\ to\ the\ health\ of\ the\ player\ and\ updates\ the\ health\ bar.\r\n\ \r\n\ @param\ 'healthPointsToAdd'\:\ The\ health\ points\ that\ the\ healing\ item\ restores\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ Method\ 'act'\:\ Is\ called\ every\ tick\ or\ whenever\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\r\n\ It\ calls\ the\ 'act'\ method\ of\ the\ AnimatedCharacter\ superclass\ to\ perform\ animations\ and\ movement.\r\n
comment3.params=
comment3.target=void\ move()
comment3.text=\r\n\ Method\ 'move'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ It\ sets\ the\ move\ variables\ if\ 'w',\ 's',\ 'd'\ or\ 'a'\ is\ pressed.\r\n\ If\ an\ item\ was\ used,\ it\ checks\ if\ the\ use\ cooldown\ of\ that\ item\ has\ expired,\ because\ the\ character\ is\ not\ able\ to\ move\ while\ using\ an\ item\ /\ attacking.\r\n
comment4.params=
comment4.target=void\ updateLayers()
comment4.text=\r\n\ Method\ 'updateLayers'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ It\ sets\ the\ currentSlotItem\ variable\ to\ the\ name\ of\ the\ item\ in\ the\ current\ hotbar\ slot,\ if\ the\ item\ changed.\r\n\ If\ the\ item\ changed\ the\ layers\ of\ the\ spriteSheet\ will\ be\ updated\ and\ the\ animations\ will\ be\ refreshed\ to\ show\ the\ correct\ item\ in\ the\ current\ hotbar\ slot.\r\n\ To\ get\ the\ currentSlotItemType,\ the\ mothod\ 'getItemType'\ in\ ItemData\ class\ will\ be\ called.\r\n
comment5.params=
comment5.target=void\ useItem()
comment5.text=\r\n\ Method\ 'useItem'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ If\ an\ item\ was\ used\ already,\ it\ checks\ if\ the\ use\ cooldown\ of\ that\ item\ has\ expired.\r\n\ If\ the\ cooldown\ has\ expired,\ and\ if\ the\ left\ mouse\ button\ is\ pressed,\ it\ plays\ the\ corresponding\ animation\ and\ checks\ if\ an\ enemy\ was\ hit\ /\ spwans\ an\ arrow\ /\ heals\ the\ player.\r\n
comment6.params=
comment6.target=void\ checkCollision()
comment6.text=\r\n\ Method\ 'checkCollision'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ If\ the\ collder\ of\ the\ player\ intersects\ another\ collider\ or\ an\ object,\ teleports\ the\ player\ back\ to\ his\ position\ of\ the\ last\ tick.\r\n
comment7.params=
comment7.target=void\ storePosition()
comment7.text=\r\n\ Method\ 'storePosition'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ It\ stores\ the\ current\ position\ of\ the\ player,\ so\ that\ information\ can\ be\ used\ next\ tick\ in\ the\ 'checkCollision'\ method,\ if\ the\ player\ collides\ with\ something.\r\n
comment8.params=
comment8.target=void\ checkPickUp()
comment8.text=\r\n\ Method\ 'checkPickUp'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ If\ 'e'\ is\ pressed,\ it\ will\ look\ for\ the\ the\ nearest\ PickUpItem\ thats\ in\ pickUpRange\ or\ it\ will\ look\ for\ the\ nearest\ Chest\ in\ pickUpRange.\r\n\ The\ PickUpItem\ will\ be\ picked\ up\ and\ added\ to\ the\ inventory.\r\n\ The\ Chest\ will\ be\ opened\ and\ the\ items\ in\ the\ chest\ will\ be\ added\ to\ the\ inventory.\r\n
comment9.params=
comment9.target=void\ toggleInventory()
comment9.text=\r\n\ Method\ 'toggleInventory'\:\ Is\ called\ every\ tick\ by\ the\ 'act'\ method.\r\n\ If\ 'i'\ is\ pressed,\ it\ checks\ if\ the\ cooldown\ of\ the\ last\ key\ press\ has\ expired.\r\n\ If\ the\ cooldown\ has\ expired,\ the\ inventory\ will\ be\ closed\ if\ it\ was\ open\ and\ opened\ if\ it\ was\ closed.\r\n
numComments=15
